{
  "info": {
    "name": "ANB API - Colección (cumple Gestión de usuarios)",
    "_postman_id": "anb-api-1757452893",
    "description": "Colección alineada a los requisitos de 'Gestión de usuarios' y flujos de video/votación.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:9090",
      "type": "string"
    },
    {
      "key": "token",
      "value": "",
      "type": "string"
    },
    {
      "key": "video_id",
      "value": "1",
      "type": "string"
    },
    {
      "key": "token_A",
      "value": "",
      "type": "string"
    },
    {
      "key": "token_B",
      "value": "",
      "type": "string"
    },
    {
      "key": "video_id_A",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "POST /api/v1/auth/signup (201/400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/signup",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "signup"
              ]
            },
            "description": "Registro de jugadores.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"StrongPass123\",\n  \"password2\": \"StrongPass123\",\n  \"city\": \"Bogotá\",\n  \"country\": \"Colombia\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// SIGNUP - 201 / 400",
                  "pm.test('201 Created - Usuario creado exitosamente', function(){ if(pm.response.code===201) pm.expect(pm.response.code).to.eql(201); });",
                  "pm.test('400 Bad Request - Error de validación', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /api/v1/auth/login (200/401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "login"
              ]
            },
            "description": "Autenticación y guardado automático de {{token}}.",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"StrongPass123\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// LOGIN - 200 / 401 y guardar token",
                  "let data = {};",
                  "try { data = pm.response.json(); } catch(e) {}",
                  "if (pm.response.code === 200 && data && data.access_token) {",
                  "  pm.collectionVariables.set('token', data.access_token);",
                  "}",
                  "pm.test('200 OK o 401 Unauthorized', function(){ pm.expect([200,401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "LOGIN A (guarda {{token_A}})",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "login"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"alice@example.com\",\n  \"password\": \"StrongPass123\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "let d={}; try{d=pm.response.json();}catch(e){}",
                  "if(pm.response.code===200 && d.access_token){ pm.collectionVariables.set('token_A', d.access_token);}",
                  "pm.test('200 o 401', function(){ pm.expect([200,401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        },
        {
          "name": "LOGIN B (guarda {{token_B}})",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "login"
              ]
            },
            "description": "",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"bob@example.com\",\n  \"password\": \"StrongPass123\"\n}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "let d={}; try{d=pm.response.json();}catch(e){}",
                  "if(pm.response.code===200 && d.access_token){ pm.collectionVariables.set('token_B', d.access_token);}",
                  "pm.test('200 o 401', function(){ pm.expect([200,401]).to.include(pm.response.code); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Videos (protegido)",
      "item": [
        {
          "name": "POST /api/v1/videos/upload (form-data)",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/upload",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "videos",
                "upload"
              ]
            },
            "description": "Sube un video (requiere token).",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "title",
                  "value": "Mi mejor tiro de 3",
                  "type": "text"
                },
                {
                  "key": "video",
                  "type": "file",
                  "src": ""
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// UPLOAD - 201 / 400 / 401",
                  "pm.test('201 Created - Video subido y tarea creada', function(){ if(pm.response.code===201) pm.expect(pm.response.code).to.eql(201); });",
                  "pm.test('400 Bad Request - Archivo inválido', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });",
                  "pm.test('401 Unauthorized - Falta autenticación', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/v1/videos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/videos",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "videos"
              ]
            },
            "description": "Lista mis videos (requiere token)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// LIST MY VIDEOS - 200 / 401",
                  "pm.test('200 OK - Lista de videos obtenida', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
                  "pm.test('401 Unauthorized - Falta autenticación', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });"
                ]
              }
            }
          ]
        },
        {
          "name": "GET /api/v1/videos/:video_id",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "videos",
                "{{video_id}}"
              ]
            },
            "description": "Detalle de video (requiere token)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// GET VIDEO BY ID - 200 / 401 / 403 / 404",
                  "pm.test('200 OK - Detalle de video', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
                  "pm.test('401 Unauthorized', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
                  "pm.test('403 Forbidden - No es el propietario', function(){ if(pm.response.code===403) pm.expect(pm.response.code).to.eql(403); });",
                  "pm.test('404 Not Found - No existe o no pertenece', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /api/v1/videos/:video_id",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "videos",
                "{{video_id}}"
              ]
            },
            "description": "Eliminar video (requiere token)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// DELETE VIDEO - 200 / 400 / 401 / 403 / 404",
                  "pm.test('200 OK - Eliminado correctamente', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
                  "pm.test('400 Bad Request - No se puede eliminar (procesado/publicado)', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });",
                  "pm.test('401 Unauthorized', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
                  "pm.test('403 Forbidden - No es el propietario', function(){ if(pm.response.code===403) pm.expect(pm.response.code).to.eql(403); });",
                  "pm.test('404 Not Found - No existe o no pertenece', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
                ]
              }
            }
          ]
        },
        {
          "name": "POST /api/v1/videos/:video_id/mark-processed",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}/mark-processed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "videos",
                "{{video_id}}",
                "mark-processed"
              ]
            },
            "description": "Marcar video como procesado (requiere token)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// MARK PROCESSED - 200 / 401 / 403 / 404",
                  "pm.test('200 OK - Marcado como procesado', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
                  "pm.test('401 Unauthorized', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
                  "pm.test('403 Forbidden - No es el propietario', function(){ if(pm.response.code===403) pm.expect(pm.response.code).to.eql(403); });",
                  "pm.test('404 Not Found - No existe o no pertenece', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Público (no requiere token)",
      "auth": {
        "type": "noauth"
      },
      "item": [
        {
          "name": "GET /api/v1/public/videos",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/public/videos",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "public",
                "videos"
              ]
            },
            "description": "Lista videos públicos."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// PUBLIC VIDEOS - 200",
                  "pm.test('200 OK - Lista de videos públicos', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });"
                ]
              }
            }
          ],
          "auth": {
            "type": "noauth"
          }
        },
        {
          "name": "GET /api/v1/public/rankings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/public/rankings",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "public",
                "rankings"
              ]
            },
            "description": "Tabla de clasificación (no requiere token). Admite filtros en query string."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// RANKINGS - 200 / 400 (parámetro inválido)",
                  "pm.test('200 OK - Lista de rankings obtenida', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
                  "pm.test('400 Bad Request - Parámetro inválido', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });"
                ]
              }
            }
          ],
          "auth": {
            "type": "noauth"
          }
        }
      ]
    },
    {
      "name": "Votes (protegido)",
      "item": [
        {
          "name": "POST /api/v1/public/videos/:video_id/vote",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/public/videos/{{video_id}}/vote",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "public",
                "videos",
                "{{video_id}}",
                "vote"
              ]
            },
            "description": "Crear voto (requiere token)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// VOTE CREATE - 200 / 400 / 401 / 404",
                  "pm.test('200 OK - Voto registrado', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
                  "pm.test('400 Bad Request - Ya has votado', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });",
                  "pm.test('401 Unauthorized - Falta autenticación', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
                  "pm.test('404 Not Found - Video no encontrado', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE /api/v1/public/videos/:video_id/vote",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/public/videos/{{video_id}}/vote",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "public",
                "videos",
                "{{video_id}}",
                "vote"
              ]
            },
            "description": "Quitar mi voto (requiere token)."
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// VOTE DELETE - 200 / 401 / 404",
                  "pm.test('200 OK - Voto eliminado', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
                  "pm.test('401 Unauthorized - Falta autenticación', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
                  "pm.test('404 Not Found - No había voto o video no existe', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}