version: '3.8'

services:
  postgres-anb:
    image: postgres:15-alpine
    container_name: postgres-anb
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  redis-anb:
    image: redis:alpine
    container_name: redis-anb
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped

  api:
    container_name: api-anb
    build:
      context: ./backend 
      dockerfile: Dockerfile
    command: /api_server
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - uploads-data:/app/uploads
    env_file:
      - .env
    depends_on:
      - postgres-anb
      - redis-anb
    restart: unless-stopped

  worker:
    container_name: worker-anb
    build:
      context: ./backend 
      dockerfile: Dockerfile
    command: /worker_server
    volumes:
      - uploads-data:/app/uploads
      - intro-data:/app/intro
    env_file:
      - .env
    depends_on:
      - postgres-anb
      - redis-anb
    restart: unless-stopped
    
 # --- SERVICIO DE TESTS ---
  test:
    container_name: test-anb
    build:
      context: ./backend 
      dockerfile: Dockerfile.test
    env_file:
      - .env
    depends_on:
      - postgres-anb
      - redis-anb
    profiles:
      - test
    volumes:
      - ./backend:/app
    command: sh -c "go test ./... -v -cover"

  # Frontend service
  frontend:
    container_name: frontend-anb
    build:
      context: ./frontend 
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  uploads-data:
  intro-data: