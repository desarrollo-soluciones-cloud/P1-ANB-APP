services:
  postgres-anb:
    image: postgres:15-alpine
    container_name: postgres-anb
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --data-checksums"
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis-anb:
    image: redis:7-alpine
    container_name: redis-anb
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  api:
    container_name: api-anb
    build:
      context: ./backend 
      dockerfile: Dockerfile
    command: /api_server
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - uploads-data:/app/uploads
      - intro-data:/app/intro
      - logs-data:/app/logs
    env_file:
      - .env
    depends_on:
      postgres-anb:
        condition: service_healthy
      redis-anb:
        condition: service_healthy
    restart: unless-stopped

  worker:
    container_name: worker-anb
    build:
      context: ./backend 
      dockerfile: Dockerfile
    command: /worker_server
    volumes:
      - uploads-data:/app/uploads
      - intro-data:/app/intro
      - logs-data:/app/logs
    env_file:
      - .env
    depends_on:
      postgres-anb:
        condition: service_healthy
      redis-anb:
        condition: service_healthy
      api:
        condition: service_started
    restart: unless-stopped
    
  test:
    container_name: test-anb
    build:
      context: ./backend 
      dockerfile: Dockerfile.test
    env_file:
      - .env
    depends_on:
      postgres-anb:
        condition: service_healthy
      redis-anb:
        condition: service_healthy
    profiles:
      - test
    volumes:
      - ./backend:/app
    command: sh -c "go test ./... -v -cover"

  frontend:
    container_name: frontend-anb
    build:
      context: ./frontend 
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    depends_on:
      api:
        condition: service_started
    restart: unless-stopped

  adminer:
    image: adminer:latest
    container_name: anb-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres-anb
      - ADMINER_PLUGINS=tables-filter tinymce
    depends_on:
      postgres-anb:
        condition: service_healthy
    restart: unless-stopped
    profiles:
      - debug

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  uploads-data:
    driver: local
  intro-data:
    driver: local
  logs-data:
    driver: local

networks:
  default:
    name: anb-network
    driver: bridge