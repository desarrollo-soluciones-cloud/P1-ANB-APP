{
	"info": {
		"_postman_id": "2bd9eb00-3ce5-4514-80d2-b6c1fb130dbd",
		"name": "ANB API - Colección (cumple Gestión de usuarios)",
		"description": "Colección alineada a los requisitos de 'Gestión de usuarios' y flujos de video/votación.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47549701",
		"_collection_link": "https://maorm9626-3795003.postman.co/workspace/Mauricio-Ramirez's-Workspace~e4c652de-2479-47a9-892d-b836243ff5d5/collection/47549701-2bd9eb00-3ce5-4514-80d2-b6c1fb130dbd?action=share&source=collection_link&creator=47549701"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "SINGUP (201/400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// SIGNUP - 201 / 400",
									"pm.test('201 Created - Usuario creado exitosamente', function(){ if(pm.response.code===201) pm.expect(pm.response.code).to.eql(201); });",
									"pm.test('400 Bad Request - Error de validación', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"StrongPass123\",\n  \"password2\": \"StrongPass123\",\n  \"city\": \"Bogotá\",\n  \"country\": \"Colombia\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"signup"
							]
						},
						"description": "Registro de jugadores."
					},
					"response": []
				},
				{
					"name": "LOGIN (200/401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// LOGIN - 200 / 401 y guardar token",
									"let data = {};",
									"try { data = pm.response.json(); } catch(e) {}",
									"if (pm.response.code === 200 && data && data.access_token) {",
									"  pm.collectionVariables.set('token', data.access_token);",
									"}",
									"pm.test('200 OK o 401 Unauthorized', function(){ pm.expect([200,401]).to.include(pm.response.code); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"StrongPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Autenticación y guardado automático de {{token}}."
					},
					"response": []
				},
				{
					"name": "LOGIN A (guarda {{token_A}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let d={}; try{d=pm.response.json();}catch(e){}",
									"if(pm.response.code===200 && d.access_token){ pm.collectionVariables.set('token_A', d.access_token);}",
									"pm.test('200 o 401', function(){ pm.expect([200,401]).to.include(pm.response.code); });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"alice@example.com\",\n  \"password\": \"StrongPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGIN B (guarda {{token_B}})",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"let d={}; try{d=pm.response.json();}catch(e){}",
									"if(pm.response.code===200 && d.access_token){ pm.collectionVariables.set('token_B', d.access_token);}",
									"pm.test('200 o 401', function(){ pm.expect([200,401]).to.include(pm.response.code); });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"bob@example.com\",\n  \"password\": \"StrongPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Videos (protegido)",
			"item": [
				{
					"name": "POST VIDEO",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// UPLOAD - 201 / 400 / 401",
									"pm.test('201 Created - Video subido y tarea creada', function(){ if(pm.response.code===201) pm.expect(pm.response.code).to.eql(201); });",
									"pm.test('400 Bad Request - Archivo inválido', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });",
									"pm.test('401 Unauthorized - Falta autenticación', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Mi mejor tiro de 3",
									"type": "text"
								},
								{
									"key": "video",
									"value": "",
									"type": "file"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/v1/videos/upload",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"videos",
								"upload"
							]
						},
						"description": "Sube un video (requiere token)."
					},
					"response": []
				},
				{
					"name": "LIST VIDEOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// LIST MY VIDEOS - 200 / 401",
									"pm.test('200 OK - Lista de videos obtenida', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
									"pm.test('401 Unauthorized - Falta autenticación', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/videos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"videos"
							]
						},
						"description": "Lista mis videos (requiere token)."
					},
					"response": []
				},
				{
					"name": "GET VIDEO BY ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// GET VIDEO BY ID - 200 / 401 / 403 / 404",
									"pm.test('200 OK - Detalle de video', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
									"pm.test('401 Unauthorized', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
									"pm.test('403 Forbidden - No es el propietario', function(){ if(pm.response.code===403) pm.expect(pm.response.code).to.eql(403); });",
									"pm.test('404 Not Found - No existe o no pertenece', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/videos/{{video_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"videos",
								"{{video_id}}"
							]
						},
						"description": "Detalle de video (requiere token)."
					},
					"response": []
				},
				{
					"name": "DELETE VIDEO",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// DELETE VIDEO - 200 / 400 / 401 / 403 / 404",
									"pm.test('200 OK - Eliminado correctamente', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
									"pm.test('400 Bad Request - No se puede eliminar (procesado/publicado)', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });",
									"pm.test('401 Unauthorized', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
									"pm.test('403 Forbidden - No es el propietario', function(){ if(pm.response.code===403) pm.expect(pm.response.code).to.eql(403); });",
									"pm.test('404 Not Found - No existe o no pertenece', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/videos/{{video_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"videos",
								"{{video_id}}"
							]
						},
						"description": "Eliminar video (requiere token)."
					},
					"response": []
				},
				{
					"name": "MARK PROCESSED VIDEO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// MARK PROCESSED - 200 / 401 / 403 / 404",
									"pm.test('200 OK - Marcado como procesado', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
									"pm.test('401 Unauthorized', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
									"pm.test('403 Forbidden - No es el propietario', function(){ if(pm.response.code===403) pm.expect(pm.response.code).to.eql(403); });",
									"pm.test('404 Not Found - No existe o no pertenece', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/videos/{{video_id}}/mark-processed",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"videos",
								"{{video_id}}",
								"mark-processed"
							]
						},
						"description": "Marcar video como procesado (requiere token)."
					},
					"response": []
				}
			]
		},
		{
			"name": "Público (no requiere token)",
			"item": [
				{
					"name": "PUBLIC VIDEOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// PUBLIC VIDEOS - 200",
									"pm.test('200 OK - Lista de videos públicos', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/public/videos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"public",
								"videos"
							]
						},
						"description": "Lista videos públicos."
					},
					"response": []
				},
				{
					"name": "RANKINGS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// RANKINGS - 200 / 400 (parámetro inválido)",
									"pm.test('200 OK - Lista de rankings obtenida', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
									"pm.test('400 Bad Request - Parámetro inválido', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/public/rankings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"public",
								"rankings"
							]
						},
						"description": "Tabla de clasificación (no requiere token). Admite filtros en query string."
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			}
		},
		{
			"name": "Votes (protegido)",
			"item": [
				{
					"name": "CREATE VOTE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// VOTE CREATE - 200 / 400 / 401 / 404",
									"pm.test('200 OK - Voto registrado', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
									"pm.test('400 Bad Request - Ya has votado', function(){ if(pm.response.code===400) pm.expect(pm.response.code).to.eql(400); });",
									"pm.test('401 Unauthorized - Falta autenticación', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
									"pm.test('404 Not Found - Video no encontrado', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/public/videos/{{video_id}}/vote",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"public",
								"videos",
								"{{video_id}}",
								"vote"
							]
						},
						"description": "Crear voto (requiere token)."
					},
					"response": []
				},
				{
					"name": "DELETE VOTE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// VOTE DELETE - 200 / 401 / 404",
									"pm.test('200 OK - Voto eliminado', function(){ if(pm.response.code===200) pm.expect(pm.response.code).to.eql(200); });",
									"pm.test('401 Unauthorized - Falta autenticación', function(){ if(pm.response.code===401) pm.expect(pm.response.code).to.eql(401); });",
									"pm.test('404 Not Found - No había voto o video no existe', function(){ if(pm.response.code===404) pm.expect(pm.response.code).to.eql(404); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/public/videos/{{video_id}}/vote",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"public",
								"videos",
								"{{video_id}}",
								"vote"
							]
						},
						"description": "Quitar mi voto (requiere token)."
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:9090",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "video_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "token_A",
			"value": "",
			"type": "string"
		},
		{
			"key": "token_B",
			"value": "",
			"type": "string"
		},
		{
			"key": "video_id_A",
			"value": "",
			"type": "string"
		}
	]
}