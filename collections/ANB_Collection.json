{
  "info": {
    "name": "ANB API Collection",
    "description": "API de la Academia Nacional de Baloncesto - Endpoints para registro, autenticación, gestión de videos y votación",
    "version": "1.0.0",
    "_postman_id": "anb-api-collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Sign Up",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('first_name');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"StrongPass123\",\n  \"password2\": \"StrongPass123\",\n  \"city\": \"Bogotá\",\n  \"country\": \"Colombia\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "signup"]
            },
            "description": "Registra un nuevo jugador. Códigos: 201 (éxito), 400 (validación)"
          }
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData.token_type).to.eql('Bearer');",
                  "});",
                  "",
                  "// Guardar token automáticamente",
                  "if (pm.response.code === 200) {",
                  "    var jsonData = pm.response.json();",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"StrongPass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Autentica usuario y devuelve token JWT. Códigos: 200 (éxito), 401 (credenciales inválidas)"
          }
        }
      ]
    },
    {
      "name": "Videos",
      "item": [
        {
          "name": "Upload Video",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has upload confirmation\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('task_id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "video",
                  "type": "file",
                  "src": "",
                  "description": "Archivo MP4, máximo 100MB"
                },
                {
                  "key": "title",
                  "value": "Mi mejor tiro de 3",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/v1/videos/upload",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "upload"]
            },
            "description": "Sube video al sistema. Códigos: 201 (éxito), 400 (archivo inválido), 401 (no autenticado)"
          }
        },
        {
          "name": "List My Videos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/videos",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos"]
            },
            "description": "Lista videos del usuario autenticado. Códigos: 200 (éxito), 401 (no autenticado)"
          }
        },
        {
          "name": "Get Video Detail",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 403, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 403, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Has video details\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('title');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "{{video_id}}"]
            },
            "description": "Obtiene detalles de video específico. Códigos: 200 (éxito), 401 (no autenticado), 403 (sin permisos), 404 (no encontrado)"
          }
        },
        {
          "name": "Download Video",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}/download?type=processed",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "{{video_id}}", "download"],
              "query": [
                {
                  "key": "type",
                  "value": "processed",
                  "description": "'original' o 'processed'"
                }
              ]
            },
            "description": "Descarga archivo de video. Solo el propietario puede descargar"
          }
        },
        {
          "name": "Delete Video",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 400, 403, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 403, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Deletion confirmed\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "{{video_id}}"]
            },
            "description": "Elimina video del sistema. Códigos: 200 (éxito), 400 (no se puede eliminar), 403 (sin permisos), 404 (no encontrado)"
          }
        },
        {
          "name": "Mark as Processed",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/videos/{{video_id}}/mark-processed",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "videos", "{{video_id}}", "mark-processed"]
            },
            "description": "Marca video como procesado (uso interno)"
          }
        }
      ]
    },
    {
      "name": "Public Videos",
      "item": [
        {
          "name": "List Public Videos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/public/videos",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "public", "videos"]
            },
            "description": "Lista videos disponibles para votación pública. No requiere autenticación"
          }
        }
      ]
    },
    {
      "name": "Voting",
      "item": [
        {
          "name": "Vote for Video",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 400, or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Vote confirmed\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('message');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/public/videos/{{video_id}}/vote",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "public", "videos", "{{video_id}}", "vote"]
            },
            "description": "Vota por un video. Un usuario solo puede votar una vez por video. Códigos: 200 (éxito), 400 (ya votó), 404 (video no encontrado), 401 (no autenticado)"
          }
        },
        {
          "name": "Remove Vote",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/public/videos/{{video_id}}/vote",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "public", "videos", "{{video_id}}", "vote"]
            },
            "description": "Remueve voto de un video. Códigos: 200 (éxito), 404 (voto no existe)"
          }
        }
      ]
    },
    {
      "name": "Rankings",
      "item": [
        {
          "name": "Get Rankings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each ranking has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(function(ranking) {",
                  "            pm.expect(ranking).to.have.property('position');",
                  "            pm.expect(ranking).to.have.property('video_id');",
                  "            pm.expect(ranking).to.have.property('votes');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/public/rankings",
              "host": ["{{base_url}}"],
              "path": ["api", "v1", "public", "rankings"]
            },
            "description": "Obtiene tabla de clasificación ordenada por votos. No requiere autenticación"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "test",
      "script": {
        "exec": [
          "pm.test(\"Response time is acceptable\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(3000);",
          "});"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "variable": [
    {
      "key": "video_id",
      "value": "1",
      "description": "ID del video para pruebas"
    }
  ]
}
